generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  role          UserRole @default(SALES)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  assignedLeads Lead[]
  assignedTasks Task[]   @relation("TaskAssignee")
  createdTasks  Task[]   @relation("TaskCreator")

  @@map("users")
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  color       String     @default("#3B82F6")
  description String?
  createdAt   DateTime   @default(now())
  customers   Customer[] @relation("CustomerToTag")
  leads       Lead[]     @relation("LeadToTag")

  @@map("tags")
}

model Lead {
  id           String     @id @default(cuid())
  name         String
  email        String?
  phone        String?
  company      String?
  status       LeadStatus @default(NEW)
  source       String?
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  convertedAt  DateTime?
  assignedToId String?
  isArchived   Boolean    @default(false)
  activities   Activity[]
  customer     Customer?
  assignedTo   User?      @relation(fields: [assignedToId], references: [id])
  tasks        Task[]
  tags         Tag[]      @relation("LeadToTag")

  @@map("leads")
}

model Customer {
  id              String     @id @default(cuid())
  name            String
  email           String     @unique
  phone           String?
  company         String?
  billingAddress  String?
  gstin           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  leadId          String?    @unique
  isArchived      Boolean    @default(false)
  notes           String?
  shippingAddress String?
  activities      Activity[]
  contacts        Contact[]
  lead            Lead?      @relation(fields: [leadId], references: [id])
  tasks           Task[]
  tags            Tag[]      @relation("CustomerToTag")

  @@map("customers")
}

model Contact {
  id         String   @id @default(cuid())
  name       String
  email      String?
  phone      String?
  position   String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  title       String
  description String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  leadId      String?
  customerId  String?
  customer    Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  lead        Lead?        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus   @default(PENDING)
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime?
  completedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignedToId String?
  createdById  String
  leadId       String?
  customerId   String?
  assignedTo   User?        @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdBy    User         @relation("TaskCreator", fields: [createdById], references: [id])
  customer     Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  lead         Lead?        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum ActivityType {
  NOTE
  CALL
  EMAIL
  MEETING
  TASK
}

enum UserRole {
  ADMIN
  MANAGER
  SALES
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
