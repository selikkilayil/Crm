// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum ActivityType {
  NOTE
  CALL
  EMAIL
  MEETING
  TASK
}

enum UserRole {
  ADMIN
  MANAGER
  SALES
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(SALES)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  assignedLeads     Lead[]
  assignedTasks     Task[]     @relation("TaskAssignee")
  createdTasks      Task[]     @relation("TaskCreator")
  
  @@map("users")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String   @default("#3B82F6")
  description String?
  createdAt   DateTime @default(now())
  
  leads       Lead[]
  customers   Customer[]
  
  @@map("tags")
}

model Lead {
  id          String     @id @default(cuid())
  name        String
  email       String?
  phone       String?
  company     String?
  status      LeadStatus @default(NEW)
  source      String?
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  convertedAt DateTime?
  isArchived  Boolean    @default(false)
  
  assignedToId String?
  assignedTo   User?      @relation(fields: [assignedToId], references: [id])
  
  activities   Activity[]
  tasks        Task[]
  customer     Customer?
  tags         Tag[]
  
  @@map("leads")
}

model Customer {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  phone          String?
  company        String?
  billingAddress String?
  shippingAddress String?
  gstin          String?
  notes          String?
  isArchived     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  leadId         String?  @unique
  lead           Lead?    @relation(fields: [leadId], references: [id])
  
  activities     Activity[]
  tasks          Task[]
  tags           Tag[]
  contacts       Contact[]
  
  @@map("customers")
}

model Contact {
  id         String   @id @default(cuid())
  name       String
  email      String?
  phone      String?
  position   String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("contacts")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  title       String
  description String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  leadId      String?
  lead        Lead?        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  customerId  String?
  customer    Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("activities")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  assignedToId String?
  assignedTo   User?        @relation("TaskAssignee", fields: [assignedToId], references: [id])
  
  createdById  String
  createdBy    User         @relation("TaskCreator", fields: [createdById], references: [id])
  
  leadId       String?
  lead         Lead?        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  customerId   String?
  customer     Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("tasks")
}
