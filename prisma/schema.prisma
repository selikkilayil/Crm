generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(cuid())
  email           String      @unique
  name            String
  role            UserRole    @default(SALES)
  customRoleId    String?     // New field for custom roles
  password        String?
  isActive        Boolean     @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  assignedLeads   Lead[]
  assignedTasks   Task[]      @relation("TaskAssignee")
  createdTasks    Task[]      @relation("TaskCreator")
  createdQuotations Quotation[] @relation("QuotationCreator")
  customRole      CustomRole? @relation(fields: [customRoleId], references: [id])

  @@map("users")
}

model CustomRole {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  isActive    Boolean @default(true)
  isSystem    Boolean @default(false) // For built-in roles that can't be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  permissions RolePermission[]
  
  @@map("custom_roles")
}

model Permission {
  id           String @id @default(cuid())
  resource     String // e.g., "leads", "customers", "users"
  action       String // e.g., "view", "create", "edit", "delete"
  description  String?
  category     String? // e.g., "CRM", "Admin", "Reports"
  createdAt    DateTime @default(now())
  
  // Relations
  rolePermissions RolePermission[]
  
  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  
  // Relations
  role         CustomRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  color       String     @default("#3B82F6")
  description String?
  createdAt   DateTime   @default(now())
  customers   Customer[] @relation("CustomerToTag")
  leads       Lead[]     @relation("LeadToTag")

  @@map("tags")
}

model Lead {
  id           String     @id @default(cuid())
  name         String
  email        String?
  phone        String?
  company      String?
  status       LeadStatus @default(NEW)
  source       String?
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  convertedAt  DateTime?
  assignedToId String?
  isArchived   Boolean    @default(false)
  activities   Activity[]
  customer     Customer?
  assignedTo   User?      @relation(fields: [assignedToId], references: [id])
  tasks        Task[]
  tags         Tag[]      @relation("LeadToTag")

  @@map("leads")
}

model Customer {
  id              String      @id @default(cuid())
  name            String
  email           String      @unique
  phone           String?
  company         String?
  billingAddress  String?
  gstin           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  leadId          String?     @unique
  isArchived      Boolean     @default(false)
  notes           String?
  shippingAddress String?
  activities      Activity[]
  contacts        Contact[]
  lead            Lead?       @relation(fields: [leadId], references: [id])
  tasks           Task[]
  tags            Tag[]       @relation("CustomerToTag")
  quotations      Quotation[]

  @@map("customers")
}

model Contact {
  id         String   @id @default(cuid())
  name       String
  email      String?
  phone      String?
  position   String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  title       String
  description String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  leadId      String?
  customerId  String?
  customer    Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  lead        Lead?        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus   @default(PENDING)
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime?
  completedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignedToId String?
  createdById  String
  leadId       String?
  customerId   String?
  assignedTo   User?        @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdBy    User         @relation("TaskCreator", fields: [createdById], references: [id])
  customer     Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  lead         Lead?        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Quotation {
  id               String            @id @default(cuid())
  quotationNumber  String            @unique
  date             DateTime          @default(now())
  validUntil       DateTime?
  status           QuotationStatus   @default(DRAFT)
  paymentTerms     String?
  deliveryTerms    String?
  currency         String            @default("INR")
  subtotal         Decimal           @default(0) @db.Decimal(10, 2)
  totalTax         Decimal           @default(0) @db.Decimal(10, 2)
  totalDiscount    Decimal           @default(0) @db.Decimal(10, 2)
  roundOff         Decimal           @default(0) @db.Decimal(10, 2)
  grandTotal       Decimal           @default(0) @db.Decimal(10, 2)
  notes            String?
  termsConditions  String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  customerId       String
  customer         Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  createdById      String
  createdBy        User              @relation("QuotationCreator", fields: [createdById], references: [id])
  
  items            QuotationItem[]

  @@map("quotations")
}

model QuotationItem {
  id           String    @id @default(cuid())
  productName  String
  description  String?
  quantity     Decimal   @db.Decimal(10, 3)
  unitPrice    Decimal   @db.Decimal(10, 2)
  discount     Decimal   @default(0) @db.Decimal(5, 2)
  taxPercent   Decimal   @default(0) @db.Decimal(5, 2)
  subtotal     Decimal   @db.Decimal(10, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  quotationId  String
  quotation    Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  @@map("quotation_items")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum ActivityType {
  NOTE
  CALL
  EMAIL
  MEETING
  TASK
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
  SALES
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}
